import {DeviceEventEmitter, NativeModules} from 'react-native';
import Onyx from 'react-native-onyx';
import type {OnyxEntry} from 'react-native-onyx';
import CONST from '@src/CONST';
import ONYXKEYS from '@src/ONYXKEYS';
import type {Credentials, HybridApp, Session, TryNewDot} from '@src/types/onyx';
import {
    setIsSigningIn,
    setNewDotSignInState,
    setOldDotSignInError,
    setOldDotSignInState,
    setReadyToShowAuthScreens,
    setReadyToSwitchToClassicExperience,
    setShouldResetSigningInLogic,
    setUseNewDotSignInPage,
} from './actions/HybridApp';
import type {Init} from './ActiveClientManager/types';
import Log from './Log';

function shouldUseOldApp(tryNewDot?: TryNewDot) {
    return tryNewDot?.classicRedirect.dismissed === true;
}

let credentials: OnyxEntry<Credentials>;
Onyx.connect({
    key: ONYXKEYS.CREDENTIALS,
    callback: (newCredentials) => {
        credentials = newCredentials;
    },
});

let currentHybridApp: OnyxEntry<HybridApp>;
let currentTryNewDot: OnyxEntry<TryNewDot>;

Onyx.connect({
    key: ONYXKEYS.HYBRID_APP,
    callback: (hybridApp) => {
        handleSignInFlow(hybridApp, currentTryNewDot);
    },
});

Onyx.connect({
    key: ONYXKEYS.NVP_TRYNEWDOT,
    callback: (tryNewDot) => {
        handleSignInFlow(currentHybridApp, tryNewDot);
    },
});

function handleSignInFlow(hybridApp: OnyxEntry<HybridApp>, tryNewDot: OnyxEntry<TryNewDot>) {
    if (!NativeModules.HybridAppModule) {
        return;
    }

    // reset sign in logic
    if (hybridApp?.shouldResetSigningInLogic) {
        console.log('[HybridApp] Resetting sign in flow');
        setReadyToShowAuthScreens(false);
        setReadyToSwitchToClassicExperience(false);
        setIsSigningIn(false);
        setUseNewDotSignInPage(true);
        setOldDotSignInError(null);

        setOldDotSignInState(CONST.HYBRID_APP_SIGN_IN_STATE.NOT_STARTED);
        setNewDotSignInState(CONST.HYBRID_APP_SIGN_IN_STATE.NOT_STARTED);
        setShouldResetSigningInLogic(false);
        return;
    }

    if (currentHybridApp?.oldDotSignInState === CONST.HYBRID_APP_SIGN_IN_STATE.RETRYING_AFTER_FAILURE && hybridApp?.oldDotSignInState === CONST.HYBRID_APP_SIGN_IN_STATE.FINISHED) {
        if (hybridApp?.oldDotSignInError) {
            setOldDotSignInState(CONST.HYBRID_APP_SIGN_IN_STATE.FAILED_AGAIN);
        } else {
            console.debug('Closing, but why', {currentHybridApp, hybridApp});
            NativeModules.HybridAppModule.closeReactNativeApp(false, true);
        }
    }

    console.log('[Hybridapp] should use old app', shouldUseOldApp(tryNewDot));
    if (
        currentHybridApp?.oldDotSignInState === CONST.HYBRID_APP_SIGN_IN_STATE.STARTED &&
        hybridApp?.oldDotSignInState === CONST.HYBRID_APP_SIGN_IN_STATE.FINISHED &&
        tryNewDot !== undefined &&
        shouldUseOldApp(tryNewDot)
    ) {
        if (hybridApp?.oldDotSignInError) {
            return;
        }
        console.log('closing!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!');
        NativeModules.HybridAppModule.closeReactNativeApp(false, false);
    }

    if (
        hybridApp?.newDotSignInState === CONST.HYBRID_APP_SIGN_IN_STATE.FINISHED &&
        hybridApp?.oldDotSignInState === CONST.HYBRID_APP_SIGN_IN_STATE.NOT_STARTED &&
        credentials?.autoGeneratedLogin &&
        credentials?.autoGeneratedPassword &&
        tryNewDot !== undefined
    ) {
        if (shouldUseOldApp(tryNewDot)) {
            setIsSigningIn(true);
        } else {
            setReadyToShowAuthScreens(true);
        }

        console.log('[HybridApp] signInToOldDot');
        setOldDotSignInState(CONST.HYBRID_APP_SIGN_IN_STATE.STARTED);
        NativeModules.HybridAppModule.signInToOldDot(credentials.autoGeneratedLogin, credentials.autoGeneratedPassword);
    }

    currentHybridApp = hybridApp;
    currentTryNewDot = tryNewDot;
}

let currentSession: OnyxEntry<Session>;
Onyx.connect({
    key: ONYXKEYS.SESSION,
    callback: (session: OnyxEntry<Session>) => {
        if (!currentSession?.authToken && session?.authToken && currentHybridApp?.newDotSignInState === CONST.HYBRID_APP_SIGN_IN_STATE.STARTED) {
            setNewDotSignInState(CONST.HYBRID_APP_SIGN_IN_STATE.FINISHED);
        }
        currentSession = session;
    },
});

const init: Init = () => {
    if (!NativeModules.HybridAppModule) {
        return;
    }

    // Setup event listeners
    DeviceEventEmitter.addListener(CONST.EVENTS.HYBRID_APP.ON_SIGN_IN_FINISHED, (data) => {
        Log.info(`[HybridApp] onSignInFinished event received with data: ${data}`, true);
        const eventData = JSON.parse(data as string) as {errorMessage: string};

        setIsSigningIn(false);
        setOldDotSignInError(eventData.errorMessage);
        setOldDotSignInState(CONST.HYBRID_APP_SIGN_IN_STATE.FINISHED);

        if (eventData.errorMessage === null) {
            setReadyToSwitchToClassicExperience(true);
        }
    });
};

export default {init};

export {shouldUseOldApp};
